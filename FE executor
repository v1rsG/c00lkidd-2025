--// Manual Client-Side Executor GUI by Dand

local plr = game:GetService("Players").LocalPlayer

local ScreenGui = Instance.new("ScreenGui", plr:WaitForChild("PlayerGui"))
ScreenGui.Name = "c00lkidd 2025"

local Frame = Instance.new("Frame", ScreenGui)
Frame.Size = UDim2.new(0, 460, 0, 300)
Frame.Position = UDim2.new(0.5, -230, 0.5, -150)
Frame.BackgroundColor3 = Color3.new(0, 0, 0)
Frame.BorderColor3 = Color3.new(1, 0, 0)
Frame.BorderSizePixel = 2
Frame.Active = true
Frame.Draggable = true

local Title = Instance.new("TextLabel", Frame)
Title.Size = UDim2.new(1, -20, 0, 30)
Title.Position = UDim2.new(0, 10, 0, 5)
Title.BackgroundTransparency = 1
Title.TextColor3 = Color3.new(1, 1, 1)
Title.Text = "c00lkidd 2025"
Title.Font = Enum.Font.SourceSansBold
Title.TextSize = 20
Title.TextXAlignment = Enum.TextXAlignment.Center

local UsernameButton = Instance.new("TextButton", Frame)
UsernameButton.Size = UDim2.new(0, 140, 0, 30)
UsernameButton.Position = UDim2.new(0, 10, 0, 40)
UsernameButton.BackgroundColor3 = Color3.new(0, 0, 0)
UsernameButton.BorderColor3 = Color3.new(1, 0, 0)
UsernameButton.TextColor3 = Color3.new(1, 1, 1)
UsernameButton.Text = "Username"
UsernameButton.Font = Enum.Font.SourceSansBold
UsernameButton.TextSize = 16

local ScrollingFrame = Instance.new("ScrollingFrame", Frame)
ScrollingFrame.Size = UDim2.new(1, -20, 0, 130)
ScrollingFrame.Position = UDim2.new(0, 10, 0, 75)
ScrollingFrame.BackgroundColor3 = Color3.new(0, 0, 0)
ScrollingFrame.BorderColor3 = Color3.new(1, 0, 0)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
ScrollingFrame.ScrollBarThickness = 6
ScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
ScrollingFrame.VerticalScrollBarInset = Enum.ScrollBarInset.ScrollBar

local TextBox = Instance.new("TextBox", ScrollingFrame)
TextBox.Size = UDim2.new(1, -6, 0, 130)
TextBox.Position = UDim2.new(0, 0, 0, 0)
TextBox.BackgroundTransparency = 1
TextBox.TextColor3 = Color3.new(1, 1, 1)
TextBox.ClearTextOnFocus = false
TextBox.MultiLine = true
TextBox.Text = ""
TextBox.Font = Enum.Font.SourceSansBold
TextBox.TextSize = 16
TextBox.PlaceholderText = "made by v1rsG on github"
TextBox.TextWrapped = true
TextBox.AutomaticSize = Enum.AutomaticSize.Y

TextBox:GetPropertyChangedSignal("Text"):Connect(function()
    ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, TextBox.AbsoluteSize.Y)
end)

local function createButton(name, xOffset)
    local button = Instance.new("TextButton", Frame)
    button.Size = UDim2.new(0, 140, 0, 40)
    button.Position = UDim2.new(0, 10 + (150 * xOffset), 0, 220)
    button.BackgroundColor3 = Color3.new(0, 0, 0)
    button.BorderColor3 = Color3.new(1, 0, 0)
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Text = name
    button.Font = Enum.Font.SourceSansBold
    button.TextSize = 16
    return button
end

local ExecuteButton = createButton("Execute", 0)
local ClearButton = createButton("Clear", 1)
local R6Button = createButton("R6", 2)

local function restoreHierarchy(instance, parentMap)
    for _, obj in ipairs(instance:GetDescendants()) do
        local originalParent = parentMap[obj]
        if originalParent then
            obj.Parent = originalParent
        end
    end
end

ExecuteButton.MouseButton1Click:Connect(function()
    local code = TextBox.Text
    local assetId = code:match("require%s*%(?%s*(%d+)%s*%)?")

    if assetId then
        local success, result = pcall(function()
            local objects = game:GetObjects("rbxassetid://" .. assetId)
            for _, root in ipairs(objects) do
                local parentMap = {}
                for _, obj in ipairs(root:GetDescendants()) do
                    parentMap[obj] = obj.Parent
                end
                root.Parent = plr:WaitForChild("PlayerGui")
                restoreHierarchy(root, parentMap)
                if root:IsA("ModuleScript") then
                    local modSuccess, modResult = pcall(function()
                        local fullRequire = require(root)
                        if typeof(fullRequire) == "function" then
                            fullRequire()
                        elseif typeof(fullRequire) == "Instance" then
                            fullRequire.Parent = plr:WaitForChild("PlayerGui")
                        elseif typeof(fullRequire) == "table" then
                            for _, item in pairs(fullRequire) do
                                if typeof(item) == "Instance" then
                                    item.Parent = plr:WaitForChild("PlayerGui")
                                end
                            end
                        end
                    end)
                    if not modSuccess then
                        warn("Error requiring module:", modResult)
                    end
                end
            end
        end)
        if not success then
            warn("Error loading asset:", result)
        end
    else
        local func = loadstring(code)
        if func then
            pcall(func)
        end
    end
end)

ClearButton.MouseButton1Click:Connect(function()
    TextBox.Text = ""
end)

R6Button.MouseButton1Click:Connect(function()
    function oof()
        game:GetObjects("rbxassetid://1561389244")[1].Parent=game.Workspace.Terrain
        local oldChar = game.Players.LocalPlayer.Character
        local c = game.Workspace.Terrain:FindFirstChildOfClass("Model"):Clone()
        c.Parent = game.Workspace
        c:MoveTo(oldChar.HumanoidRootPart.Position)
        game.Workspace.Terrain:FindFirstChildOfClass("Model"):remove()
        c.Name = game.Players.LocalPlayer.Name
        
        -- Clone clothes from original character
        if oldChar:FindFirstChild("Shirt") then
            local newShirt = oldChar.Shirt:Clone()
            newShirt.Parent = c
        end
        if oldChar:FindFirstChild("Pants") then
            local newPants = oldChar.Pants:Clone()
            newPants.Parent = c
        end
        if oldChar:FindFirstChild("Body Colors") then
            local newBodyColors = oldChar["Body Colors"]:Clone()
            newBodyColors.Parent = c
        end
        
        game.Players.LocalPlayer.Character = c
        game.Workspace.CurrentCamera.CameraSubject = c:FindFirstChildOfClass("Humanoid")
        
        -- Hide the real character
        oldChar:Destroy()

        local Figure = game.Players.LocalPlayer.Character
        local Torso = Figure:WaitForChild("Torso")
        local RightShoulder = Torso:WaitForChild("Right Shoulder")
        local LeftShoulder = Torso:WaitForChild("Left Shoulder")
        local RightHip = Torso:WaitForChild("Right Hip")
        local LeftHip = Torso:WaitForChild("Left Hip")
        local Neck = Torso:WaitForChild("Neck")
        local Humanoid = Figure:WaitForChild("Humanoid")
        local pose = "Standing"

        local currentAnim = ""
        local currentAnimInstance = nil
        local currentAnimTrack = nil
        local currentAnimKeyframeHandler = nil
        local currentAnimSpeed = 1.0
        local animTable = {}
        local animNames = {
            idle = {
                { id = "http://www.roblox.com/asset/?id=180435571", weight = 9 },
                { id = "http://www.roblox.com/asset/?id=180435792", weight = 1 }
            },
            walk = {
                { id = "http://www.roblox.com/asset/?id=180426354", weight = 10 }
            },
            run = {
                { id = "run.xml", weight = 10 }
            },
            jump = {
                { id = "http://www.roblox.com/asset/?id=125750702", weight = 10 }
            },
            fall = {
                { id = "http://www.roblox.com/asset/?id=180436148", weight = 10 }
            },
            climb = {
                { id = "http://www.roblox.com/asset/?id=180436334", weight = 10 }
            },
            sit = {
                { id = "http://www.roblox.com/asset/?id=178130996", weight = 10 }
            },
            toolnone = {
                { id = "http://www.roblox.com/asset/?id=182393478", weight = 10 }
            },
            toolslash = {
                { id = "http://www.roblox.com/asset/?id=129967390", weight = 10 }
                -- { id = "slash.xml", weight = 10 }
            },
            toollunge = {
                { id = "http://www.roblox.com/asset/?id=129967478", weight = 10 }
            },
            wave = {
                { id = "http://www.roblox.com/asset/?id=128777973", weight = 10 }
            },
            point = {
                { id = "http://www.roblox.com/asset/?id=128853357", weight = 10 }
            },
            dance1 = {
                { id = "http://www.roblox.com/asset/?id=182435998", weight = 10 },
                { id = "http://www.roblox.com/asset/?id=182491037", weight = 10 },
                { id = "http://www.roblox.com/asset/?id=182491065", weight = 10 }
            },
            dance2 = {
                { id = "http://www.roblox.com/asset/?id=182436842", weight = 10 },
                { id = "http://www.roblox.com/asset/?id=182491248", weight = 10 },
                { id = "http://www.roblox.com/asset/?id=182491277", weight = 10 }
            },
            dance3 = {
                { id = "http://www.roblox.com/asset/?id=182436935", weight = 10 },
                { id = "http://www.roblox.com/asset/?id=182491368", weight = 10 },
                { id = "http://www.roblox.com/asset/?id=182491423", weight = 10 }
            },
            laugh = {
                { id = "http://www.roblox.com/asset/?id=129423131", weight = 10 }
            },
            cheer = {
                { id = "http://www.roblox.com/asset/?id=129423030", weight = 10 }
            },
        }
        local dances = {"dance1", "dance2", "dance3"}

        -- Existance in this list signifies that it is an emote, the value indicates if it is a looping emote
        local emoteNames = { wave = false, point = false, dance1 = true, dance2 = true, dance3 = true, laugh = false, cheer = false}

        function configureAnimationSet(name, fileList)
            if (animTable[name] ~= nil) then
                for _, connection in pairs(animTable[name].connections) do
                    connection:disconnect()
                end
            end
            animTable[name] = {}
            animTable[name].count = 0
            animTable[name].totalWeight = 0
            animTable[name].connections = {}

            -- check for config values
            local config = game.Players.LocalPlayer.Character.Animate:FindFirstChild(name)
            if (config ~= nil) then
                -- print("Loading anims " .. name)
                table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
                table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
                local idx = 1
                for _, childPart in pairs(config:GetChildren()) do
                    if (childPart:IsA("Animation")) then
                        table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
                        animTable[name][idx] = {}
                        animTable[name][idx].anim = childPart
                        local weightObject = childPart:FindFirstChild("Weight")
                        if (weightObject == nil) then
                            animTable[name][idx].weight = 1
                        else
                            animTable[name][idx].weight = weightObject.Value
                        end
                        animTable[name].count = animTable[name].count + 1
                        animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
                        -- print(name .. " [" .. idx .. "] " .. animTable[name][idx].anim.AnimationId .. " (" .. animTable[name][idx].weight .. ")")
                        idx = idx + 1
                    end
                end
            end

            -- fallback to defaults
            if (animTable[name].count <= 0) then
                for idx, anim in pairs(fileList) do
                    animTable[name][idx] = {}
                    animTable[name][idx].anim = Instance.new("Animation")
                    animTable[name][idx].anim.Name = name
                    animTable[name][idx].anim.AnimationId = anim.id
                    animTable[name][idx].weight = anim.weight
                    animTable[name].count = animTable[name].count + 1
                    animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
                    -- print(name .. " [" .. idx .. "] " .. anim.id .. " (" .. anim.weight .. ")")
                end
            end
        end

        -- Setup animation objects
        function scriptChildModified(child)
            local fileList = animNames[child.Name]
            if (fileList ~= nil) then
                configureAnimationSet(child.Name, fileList)
            end
        end

        game.Players.LocalPlayer.Character.Animate.ChildAdded:connect(scriptChildModified)
        game.Players.LocalPlayer.Character.Animate.ChildRemoved:connect(scriptChildModified)


        for name, fileList in pairs(animNames) do
            configureAnimationSet(name, fileList)
        end

        -- ANIMATION

        -- declarations
        local toolAnim = "None"
        local toolAnimTime = 0

        local jumpAnimTime = 0
        local jumpAnimDuration = 0.3

        local toolTransitionTime = 0.1
        local fallTransitionTime = 0.3
        local jumpMaxLimbVelocity = 0.75

        -- functions

        function stopAllAnimations()
            local oldAnim = currentAnim

            -- return to idle if finishing an emote
            if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
                oldAnim = "idle"
            end

            currentAnim = ""
            currentAnimInstance = nil
            if (currentAnimKeyframeHandler ~= nil) then
                currentAnimKeyframeHandler:disconnect()
            end

            if (currentAnimTrack ~= nil) then
                currentAnimTrack:Stop()
                currentAnimTrack:Destroy()
                currentAnimTrack = nil
            end
            return oldAnim
        end

        function setAnimationSpeed(speed)
            if speed ~= currentAnimSpeed then
                currentAnimSpeed = speed
                currentAnimTrack:AdjustSpeed(currentAnimSpeed)
            end
        end

        function keyFrameReachedFunc(frameName)
            if (frameName == "End") then

                local repeatAnim = currentAnim
                -- return to idle if finishing an emote
                if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
                    repeatAnim = "idle"
                end

                local animSpeed = currentAnimSpeed
                playAnimation(repeatAnim, 0.0, Humanoid)
                setAnimationSpeed(animSpeed)
            end
        end

        -- Preload animations
        function playAnimation(animName, transitionTime, humanoid)

            local roll = math.random(1, animTable[animName].totalWeight)
            local origRoll = roll
            local idx = 1
            while (roll > animTable[animName][idx].weight) do
                roll = roll - animTable[animName][idx].weight
                idx = idx + 1
            end
            -- print(animName .. " " .. idx .. " [" .. origRoll .. "]")
            local anim = animTable[animName][idx].anim

            -- switch animation
            if (anim ~= currentAnimInstance) then

                if (currentAnimTrack ~= nil) then
                    currentAnimTrack:Stop(transitionTime)
                    currentAnimTrack:Destroy()
                end

                currentAnimSpeed = 1.0

                -- load it to the humanoid; get AnimationTrack
                currentAnimTrack = humanoid:LoadAnimation(anim)
                currentAnimTrack.Priority = Enum.AnimationPriority.Core

                -- play the animation
                currentAnimTrack:Play(transitionTime)
                currentAnim = animName
                currentAnimInstance = anim

                -- set up keyframe name triggers
                if (currentAnimKeyframeHandler ~= nil) then
                    currentAnimKeyframeHandler:disconnect()
                end
                currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)

            end

        end

        -------------------------------------------------------------------------------------------
        -------------------------------------------------------------------------------------------

        local toolAnimName = ""
        local toolAnimTrack = nil
        local toolAnimInstance = nil
        local currentToolAnimKeyframeHandler = nil

        function toolKeyFrameReachedFunc(frameName)
            if (frameName == "End") then
                -- print("Keyframe : ".. frameName)
                playToolAnimation(toolAnimName, 0.0, Humanoid)
            end
        end


        function playToolAnimation(animName, transitionTime, humanoid, priority)

            local roll = math.random(1, animTable[animName].totalWeight)
            local origRoll = roll
            local idx = 1
            while (roll > animTable[animName][idx].weight) do
                roll = roll - animTable[animName][idx].weight
                idx = idx + 1
            end
            -- print(animName .. " * " .. idx .. " [" .. origRoll .. "]")
            local anim = animTable[animName][idx].anim

            if (toolAnimInstance ~= anim) then

                if (toolAnimTrack ~= nil) then
                    toolAnimTrack:Stop()
                    toolAnimTrack:Destroy()
                    transitionTime = 0
                end

                -- load it to the humanoid; get AnimationTrack
                toolAnimTrack = humanoid:LoadAnimation(anim)
                if priority then
                    toolAnimTrack.Priority = priority
                end

                -- play the animation
                toolAnimTrack:Play(transitionTime)
                toolAnimName = animName
                toolAnimInstance = anim

                currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
            end
        end

        function stopToolAnimations()
            local oldAnim = toolAnimName

            if (currentToolAnimKeyframeHandler ~= nil) then
                currentToolAnimKeyframeHandler:disconnect()
            end

            toolAnimName = ""
            toolAnimInstance = nil
            if (toolAnimTrack ~= nil) then
                toolAnimTrack:Stop()
                toolAnimTrack:Destroy()
                toolAnimTrack = nil
            end


            return oldAnim
        end

        -------------------------------------------------------------------------------------------
        -------------------------------------------------------------------------------------------


        function onRunning(speed)
            if speed > 0.01 then
                playAnimation("walk", 0.1, Humanoid)
                if currentAnimInstance and currentAnimInstance.AnimationId == "http://www.roblox.com/asset/?id=180426354" then
                    setAnimationSpeed(speed / 14.5)
                end
                pose = "Running"
            else
                if emoteNames[currentAnim] == nil then
                    playAnimation("idle", 0.1, Humanoid)
                    pose = "Standing"
                end
            end
        end

        function onDied()
            pose = "Dead"
        end

        function onJumping()
            playAnimation("jump", 0.1, Humanoid)
          
